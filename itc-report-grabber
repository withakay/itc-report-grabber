#!/usr/bin/env ruby 

# == Synopsis 
#   This script downloads, parses and stores iTunes Connect 
#   the latest daily report available into an sqlite3 database
#   It requires the 'mechanize' and 'sequel' gems
#
# == Examples
#   This command does blah blah blah.
#     itc-report-tool -u user@example.com -p mypassword
#
#   Other examples:
#     itc-report-tool -q bar.doc
#     itc-report-tool --verbose foo.html
#
# == Usage 
#   itc-report-tool [options]
#
#   For help use: itc-report-tool -h
#
# == Options
#   -h, --help              Displays help message
#   -v, --version           Display the version, then exit
#   -q, --quiet             Output as little as possible, overrides verbose
#   -V, --verbose           Verbose output
#   -u, --user USER         iTunes Connect user name - REQUIRED
#   -p, --passwd PASSWD     iTunes Connect password - REQUIRED
#
#
# == Author
#   Jack Rutherford
#
# == Copyright
#   Copyright (c) 2010 Jack Rutherford. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

# TO DO - update Synopsis, Examples, etc
# TO DO - change license if necessary



require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'date'

require 'rubygems'
require 'logger'
require 'net/smtp'
require 'lib/itc-report-grabber.rb'
require 'lib/itc-report-parser.rb'
require 'lib/itc-report-persister.rb'

class App
  VERSION = '0.0.1'
  
  attr_reader :options
  attr_accessor :arguments
  
  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
    @options.user = ""
    @options.passwd = ""
    # TO DO - add additional defaults
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
      # TO DO - add additional options
      opts.on("-u", 
              "--user USERNAME",
              "your itune Connect username - required") { |user| @options.user = user }
              
      opts.on("-p", 
              "--passwd PASSWORD",
              "your iTunes Connect password - required") { |pwd| @options.passwd = pwd }
              
            
      opts.parse!(@arguments) #rescue return false
      
      #process_options
      if @options.user == ""
        return false 
      end
      if @options.passwd == ""
         return false 
      end
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      # No arguments to validate so just return true     
      true
    end
    
    # Setup the arguments
    def process_arguments
      # No arguments to process
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
		log = Logger.new(STDOUT)
		log.level = Logger::DEBUG
		report_path = "reports"
		db_path = "db"
		grabber = ItcReportGrabber.new(@options.user, @options.passwd)
		parser = ItcReportParser.new
		persister = ItcReportPersister.new(db_path)

		begin
			file_name = grabber.get_latest_report(report_path)
			if file_name.length > 0
				report = parser.parse(File.join(report_path, file_name))
				persister.save_report(report)
			else
				send_email("jack@bubble.com", "itc report grabber", "jack@bubble.com", "Jack", "[itc-report-grabber] file already exists", "file already exists")
			end

		rescue Exception => e
			log.fatal "Exception occured"
			log.fatal e
			send_email("jack@bubble.com", "itc report grabber", "jack@fader.co.uk", "Jack", "[itc-report-grabber] Exception occured", e)
		end
    end

    def process_standard_input
      input = @stdin.read      
      # TO DO - process input
      
      # [Optional]
      # @stdin.each do |line| 
      #  # TO DO - process each line
      #end
    end

  	def send_email(from, from_alias, to, to_alias, subject, message)
  		msg = <<END_OF_MESSAGE
From: #{from_alias} <#{from}>
To: #{to_alias} <#{to}>
Subject: #{subject}

#{message}
END_OF_MESSAGE

  		Net::SMTP.start('mail.bubble.com') do |smtp|
  			smtp.send_message msg, from, to
  		end
  	end
end


# TO DO - Add your Modules, Classes, etc


# Create and run the application
app = App.new(ARGV, STDIN)
app.run
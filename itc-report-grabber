#!/usr/bin/env ruby 

# == Synopsis 
#   This script downloads, parses and stores iTunes Connect 
#   the latest daily report available into an sqlite3 database
#   It requires the 'mechanize' and 'sequel' gems
#
# == Examples
#   This command does blah blah blah.
#     itc-report-tool -u user@example.com -p mypassword
#
#   Other examples:
#     itc-report-tool -q bar.doc
#     itc-report-tool --verbose foo.html
#
# == Usage 
#   itc-report-tool [options]
#
#   For help use: itc-report-tool -h
#
# == Options
#   -h, --help              Displays help message
#   -v, --version           Display the version, then exit
#   -q, --quiet             Output as little as possible, overrides verbose
#   -V, --verbose           Verbose output
#   -u, --user USER         iTunes Connect user name - REQUIRED
#   -p, --passwd PASSWD     iTunes Connect password - REQUIRED
#
#
# == Author
#   Jack Rutherford
#
# == Copyright
#   Copyright (c) 2010 Jack Rutherford. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

# TO DO - update Synopsis, Examples, etc
# TO DO - change license if necessary


require 'rubygems'
require 'optparse'
require 'ostruct'
require 'date'


require 'logger'
require 'net/smtp'
require 'lib/itc-report-grabber.rb'
require 'lib/itc-report-parser.rb'
require 'lib/itc-report-persister.rb'

class App
  VERSION = '0.1.0'
  
  attr_reader :options
  attr_reader :config
  attr_accessor :arguments
  
  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
    @options.user = ""
    @options.passwd = ""
    @options.db_path = "db"
    @options.report_path = "reports"
    # TO DO - add additional defaults
    
    @config = {}
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? && parsed_config?      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose      
      output_options if @options.verbose # [Optional]            
      process_arguments            
      process_command      
      puts "\nFinished at #{DateTime.now}" if @options.verbose      
    end
      
  end
  
  protected
  
    def parsed_options?
      # Specify options
      opts = OptionParser.new 
      opts.banner = "Usage: itc-report-grabber [options]"
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
      # TO DO - add additional options
      opts.on("-u", 
              "--user USERNAME",
              "your iTunes Connect username - required") { |user| @options.user = user }
              
      opts.on("-p", 
              "--passwd PASSWORD",
              "your iTunes Connect password - required") { |pwd| @options.passwd = pwd }
              
      opts.on("-d", 
              "--date 'MM/DD/YYYY",
              "an optional date of the report to get, of ommited the latest report is grabbed. Must be the format 'MM/DD/YYYY'") { |date| @options.date = date }
              
      opts.on("-r", 
              "--reportpath PATH_TO_STORE_REPORTS",
              "path to store the downloaded report files in") { |rp| @options.report_path = rp }
              
      opts.on("-D", 
              "--dbpath PATH_TO_DB",
              "path to the sqlite3 database to import the reports into") { |dbp| @options.db_path = dbp }
  
      opts.on("-i", 
              "--import REPORT_FILE",
              "path to a report file to manually import *cannot be used with --date*") { |ip| @options.import_path = ip }
              
      opts.on("-c", 
              "--config CONFIG_FILE",
              "path to a config file") { |cp| @options.config_path = cp }
      
      opts.on('-h', '--help'){ puts opts }       
      
      if @arguments.length > 0
        opts.parse!(@arguments) #rescue return false
      else
        puts opts.banner
      end
      #process_options
      if @options.import_path
        return true
      end
      if @options.user == ""
        return false 
      end
      if @options.passwd == ""
         return false 
      end
      true      
    end
    
    def parsed_config?
      config_file = @options.config_path
      if config_file.nil?
        config_file = "config.conf"
      end
      File.foreach(config_file) do |line|
        line.strip!
        # Skip comments and whitespace
        if (line[0] != ?# and line =~ /\S/ )
          i = line.index('=')
          if (i)
            @config[line[0..i - 1].strip] = line[i + 1..-1].strip
          else
            @config[line] = ''
          end
        end
      end
      true
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      # No arguments to validate so just return true     
      true
    end
    
    # Setup the arguments
    def process_arguments
      # No arguments to process
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
  		log = Logger.new(STDOUT)
  		log.level = Logger::DEBUG
  		report_path = @options.report_path
  		db_path = @options.db_path
  		grabber = ItcReportGrabber.new(@options.user, @options.passwd)
  		parser = ItcReportParser.new
  		persister = ItcReportPersister.new(db_path)

  		begin
  		  # first we need a report file
  		  file_name = ""
  		  if @options.date
  		    file_name = grabber.get_report(report_path, @options.date)
  		  elsif @options.import_path
  		    file_name = @options.import_path
		    else
    			file_name = grabber.get_latest_report(report_path)
  			end
  			
  			if file_name.length > 0
  			  import_file = File.join(report_path, file_name)
  			  if @options.import_path
  			    import_file = @options.import_path
  			  end
  			  if File.exists?(import_file)
  				  report = parser.parse(import_file)
    				persister.save_report(report)
  				else
  				  raise StandardError, "Could not locate report file at path " + import_file
				  end
  			else
  				send_email("[itc-report-grabber] file already exists", "file already exists")
  			end

  		rescue Exception => e
  			log.fatal "Exception occured"
  			log.fatal e
  			send_email("[itc-report-grabber] Exception occured", e)
  		end
    end

    def process_standard_input
      input = @stdin.read      
      # TO DO - process input
      
      # [Optional]
      # @stdin.each do |line| 
      #  # TO DO - process each line
      #end
    end

  	def send_email(subject, message)
  	  
  	  unless @config.nil?
  	  
    		msg = <<END_OF_MESSAGE
From: #{@config["from_alias"]} <#{@config["from_email"]}>
To: #{@config["to_alias"]} <#{@config["to_email"]}>
Subject: #{subject}

#{message}
END_OF_MESSAGE

  		  Net::SMTP.start(@config["smtp_server"]) do |smtp|
    			smtp.send_message msg, @config["from_email"], @config["to_email"]
    		end
    	end
  	end
end


# TO DO - Add your Modules, Classes, etc


# Create and run the application
app = App.new(ARGV, STDIN)
app.run